[
  {
    "objectID": "github_basis.html#git-vs-github-vs-github-desktop",
    "href": "github_basis.html#git-vs-github-vs-github-desktop",
    "title": "GitHub Training",
    "section": "Git vs GitHub vs GitHub Desktop",
    "text": "Git vs GitHub vs GitHub Desktop\n\nGit is a distributed version control system that tracks changes in source code during software development and allows multiple developers to collaborate efficiently.\n\n\nGitHub is a web-based platform that provides hosting for Git repositories, along with collaborative features like issue tracking, pull requests, and project management.\n\n\nGitHub Desktop is a graphical user interface (GUI) application that simplifies the interaction with Git and GitHub, allowing users to perform common repository operations without using the command line."
  },
  {
    "objectID": "github_basis.html#repository-repo",
    "href": "github_basis.html#repository-repo",
    "title": "GitHub Training",
    "section": "Repository (Repo)",
    "text": "Repository (Repo)\nA repository is essentially a project’s folder. It contains all the project files, including code, documentation, images, and, most importantly, the entire history of every change made to those files."
  },
  {
    "objectID": "github_basis.html#explore-repository",
    "href": "github_basis.html#explore-repository",
    "title": "GitHub Training",
    "section": "Explore repository",
    "text": "Explore repository\nhttps://github.com/oxford-pharmacoepi/Tidy-R-programming-with-OMOP\n\nIt is nice to include it in any repository a README.md document to:\n\nSummarise the content of the repository.\nInstructions how to install your package, run your code or use your tool.\nStructure of the folders of the repository.\nHow to contribute, indicate people how to contribute to the project.\nLicense\nAcknowledgments\nContact\nCitation"
  },
  {
    "objectID": "github_basis.html#formatting-.md-file",
    "href": "github_basis.html#formatting-.md-file",
    "title": "GitHub Training",
    "section": "Formatting .md file",
    "text": "Formatting .md file\nYou can usually format\n\n# to add titles.\n---- to add separator lines.\n- for bullet points.\n*text* for italic text.\n**text** for bold text."
  },
  {
    "objectID": "github_basis.html#clone",
    "href": "github_basis.html#clone",
    "title": "GitHub Training",
    "section": "Clone",
    "text": "Clone\nGet a copy of the repository onto your local machine or GitHub account."
  },
  {
    "objectID": "github_basis.html#branch",
    "href": "github_basis.html#branch",
    "title": "GitHub Training",
    "section": "Branch",
    "text": "Branch\nA branch is an independent line of development.\n\nThe default and main line of development is typically called the main branch.\nBranches allow developers to work on new features or bug fixes in isolation without affecting the stable, main code."
  },
  {
    "objectID": "github_basis.html#fork",
    "href": "github_basis.html#fork",
    "title": "GitHub Training",
    "section": "Fork",
    "text": "Fork\nA fork is a personal copy of another user’s repository. You can make changes to your copy without affecting the original. It’s often the first step in contributing to a project you don’t own.\n\nWe will see this in the practical."
  },
  {
    "objectID": "github_basis.html#open-the-project-locally",
    "href": "github_basis.html#open-the-project-locally",
    "title": "GitHub Training",
    "section": "Open the project locally",
    "text": "Open the project locally"
  },
  {
    "objectID": "github_basis.html#commit",
    "href": "github_basis.html#commit",
    "title": "GitHub Training",
    "section": "Commit",
    "text": "Commit\nA commit is a snapshot of your repository at a specific point in time. It’s the fundamental building block of Git’s history.\n\nEvery commit has a unique ID (SHA), an author, a timestamp, and a commit message that explains why the change was made.\nCommits are what you create locally with Git."
  },
  {
    "objectID": "github_basis.html#create-a-new-file",
    "href": "github_basis.html#create-a-new-file",
    "title": "GitHub Training",
    "section": "Create a new file",
    "text": "Create a new file\n\nOpen the mds folder.\nFile &gt; New File &gt; Text File &gt; your_name.md\nAdd some content\nAdd a message in the commit box\nClick commit\nDon’t do anything else"
  },
  {
    "objectID": "github_basis.html#push-pull",
    "href": "github_basis.html#push-pull",
    "title": "GitHub Training",
    "section": "Push & Pull",
    "text": "Push & Pull\nThese are the actions used to synchronise your local Git repository with the remote repository on GitHub:\n\nPush: To send your local commits from your computer to the remote repository on GitHub.\nPull: To fetch and download changes (commits) from the remote repository on GitHub to your local computer. (We will see it later)"
  },
  {
    "objectID": "github_basis.html#pull-request-pr",
    "href": "github_basis.html#pull-request-pr",
    "title": "GitHub Training",
    "section": "Pull Request (PR)",
    "text": "Pull Request (PR)\nA Pull Request is a mechanism for a developer to propose their changes (commits from a branch) to be merged into another branch (usually the main branch of the original project).\n\nPRs are where discussion, code review, and automated testing happen before the code is integrated."
  },
  {
    "objectID": "github_basis.html#our-first-pr",
    "href": "github_basis.html#our-first-pr",
    "title": "GitHub Training",
    "section": "Our first PR",
    "text": "Our first PR"
  },
  {
    "objectID": "github_basis.html#merge",
    "href": "github_basis.html#merge",
    "title": "GitHub Training",
    "section": "Merge",
    "text": "Merge\nThe merge operation integrates the changes from one branch into another. When a Pull Request is approved, the repository maintainer will merge the feature branch into the main branch.\n\nLet’s merge your Pull Requests"
  },
  {
    "objectID": "github_basis.html#pull",
    "href": "github_basis.html#pull",
    "title": "GitHub Training",
    "section": "Pull",
    "text": "Pull\nPull: To fetch and download changes (commits) from the remote repository on GitHub to your local computer. (We will see it later)\n\nChange to main branch\nFetch origin\nPull from origin"
  },
  {
    "objectID": "github_basis.html#how-everything-works",
    "href": "github_basis.html#how-everything-works",
    "title": "GitHub Training",
    "section": "How everything works",
    "text": "How everything works\nGit\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit init\nCreate a new local repository.\n\n\ngit clone &lt;url&gt;\nCopy a remote repository locally.\n\n\ngit remote add origin &lt;url&gt;\nAdd a new remote repository.\n\n\ngit status\nCheck status of changes and branch.\n\n\ngit add &lt;file&gt;\nStage specific file(s) for commit.\n\n\ngit commit -m \"message\"\nCommit staged changes.\n\n\ngit log\nView commit history.\n\n\ngit diff\nShow unstaged changes.\n\n\ngit branch &lt;name&gt;\nCreate a new branch.\n\n\ngit checkout &lt;branch&gt;\nSwitch to a branch.\n\n\ngit merge &lt;branch&gt;\nMerge another branch into the current one.\n\n\ngit fetch\nDownload updates from remote (no merge).\n\n\ngit pull\nFetch and merge changes from remote.\n\n\ngit push\nPush local commits to remote.\n\n\ngit revert &lt;commit&gt;\nRevert a specific commit with a new one.\n\n\n\n\n\nGitHub Desktop: provides the User Interface."
  },
  {
    "objectID": "github_basis.html#workflow",
    "href": "github_basis.html#workflow",
    "title": "GitHub Training",
    "section": "Workflow",
    "text": "Workflow"
  },
  {
    "objectID": "github_basis.html#need-to-update",
    "href": "github_basis.html#need-to-update",
    "title": "GitHub Training",
    "section": "Need to update",
    "text": "Need to update"
  },
  {
    "objectID": "github_basis.html#update-from-main",
    "href": "github_basis.html#update-from-main",
    "title": "GitHub Training",
    "section": "Update from main",
    "text": "Update from main"
  },
  {
    "objectID": "github_basis.html#update-from-main-1",
    "href": "github_basis.html#update-from-main-1",
    "title": "GitHub Training",
    "section": "Update from main",
    "text": "Update from main\n\nChange to your_branch branch\nBranch &gt; Update from main\nPush"
  },
  {
    "objectID": "github_basis.html#gitignore",
    "href": "github_basis.html#gitignore",
    "title": "GitHub Training",
    "section": ".gitignore",
    "text": ".gitignore\n\nThe .gitignore file tells git which files or folders to skip when tracking changes. It prevents temporary, sensitive, or unnecessary files from being added to a repository. Common examples include log files, build artifacts, and environment files. This keeps the repo clean and focused on essential code and assets.\n\nYou can ignore a file if you include the name on it my_file.txt.\nYou can ignore a folder if you include on it folder/.\nYou can ignore files using patterns (e.g. this would ignore all .txt files *.txt)"
  },
  {
    "objectID": "github_basis.html#merging-conflicts",
    "href": "github_basis.html#merging-conflicts",
    "title": "GitHub Training",
    "section": "Merging conflicts",
    "text": "Merging conflicts"
  },
  {
    "objectID": "github_basis.html#merging-conflicts-1",
    "href": "github_basis.html#merging-conflicts-1",
    "title": "GitHub Training",
    "section": "Merging conflicts",
    "text": "Merging conflicts"
  },
  {
    "objectID": "github_basis.html#issues",
    "href": "github_basis.html#issues",
    "title": "GitHub Training",
    "section": "Issues",
    "text": "Issues"
  },
  {
    "objectID": "github_basis.html#discussion",
    "href": "github_basis.html#discussion",
    "title": "GitHub Training",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "github_basis.html#codelist",
    "href": "github_basis.html#codelist",
    "title": "GitHub Training",
    "section": "Codelist",
    "text": "Codelist"
  },
  {
    "objectID": "github_basis.html#conceptsetexpression",
    "href": "github_basis.html#conceptsetexpression",
    "title": "GitHub Training",
    "section": "conceptSetExpression",
    "text": "conceptSetExpression"
  },
  {
    "objectID": "github_basis.html#export-and-import",
    "href": "github_basis.html#export-and-import",
    "title": "GitHub Training",
    "section": "Export and Import",
    "text": "Export and Import"
  },
  {
    "objectID": "github_basis.html#json-and-csv",
    "href": "github_basis.html#json-and-csv",
    "title": "GitHub Training",
    "section": "json and csv",
    "text": "json and csv"
  },
  {
    "objectID": "github_basis.html#from-codelist-to-conceptsetexpression",
    "href": "github_basis.html#from-codelist-to-conceptsetexpression",
    "title": "GitHub Training",
    "section": "From codelist to conceptSetExpression",
    "text": "From codelist to conceptSetExpression"
  },
  {
    "objectID": "github_basis.html#from-conceptsetexpression-to-codelist",
    "href": "github_basis.html#from-conceptsetexpression-to-codelist",
    "title": "GitHub Training",
    "section": "From conceptSetExpression to codelist",
    "text": "From conceptSetExpression to codelist"
  }
]