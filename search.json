[
  {
    "objectID": "github_basis.html#git-vs-github-vs-github-desktop",
    "href": "github_basis.html#git-vs-github-vs-github-desktop",
    "title": "GitHub Training",
    "section": "Git vs GitHub vs GitHub Desktop",
    "text": "Git vs GitHub vs GitHub Desktop\n\nGit is a distributed version control system that tracks changes in source code during software development and allows multiple developers to collaborate efficiently.\n\n\nGitHub is a web-based platform that provides hosting for Git repositories, along with collaborative features like issue tracking, pull requests, and project management.\n\n\nGitHub Desktop is a graphical user interface (GUI) application that simplifies the interaction with Git and GitHub, allowing users to perform common repository operations without using the command line."
  },
  {
    "objectID": "github_basis.html#repository-repo",
    "href": "github_basis.html#repository-repo",
    "title": "GitHub Training",
    "section": "Repository (Repo)",
    "text": "Repository (Repo)\nA repository is essentially a project’s folder. It contains all the project files, including code, documentation, images, and, most importantly, the entire history of every change made to those files."
  },
  {
    "objectID": "github_basis.html#explore-repository",
    "href": "github_basis.html#explore-repository",
    "title": "GitHub Training",
    "section": "Explore repository",
    "text": "Explore repository\nhttps://github.com/oxford-pharmacoepi/Tidy-R-programming-with-OMOP\n\nIt is nice to include it in any repository a README.md document to:\n\nSummarise the content of the repository.\nInstructions how to install your package, run your code or use your tool.\nStructure of the folders of the repository.\nHow to contribute, indicate people how to contribute to the project.\nLicense\nAcknowledgments\nContact\nCitation"
  },
  {
    "objectID": "github_basis.html#formatting-.md-file",
    "href": "github_basis.html#formatting-.md-file",
    "title": "GitHub Training",
    "section": "Formatting .md file",
    "text": "Formatting .md file\nYou can usually format\n\n# to add titles.\n---- to add separator lines.\n- for bullet points.\n*text* for italic text.\n**text** for bold text."
  },
  {
    "objectID": "github_basis.html#clone",
    "href": "github_basis.html#clone",
    "title": "GitHub Training",
    "section": "Clone",
    "text": "Clone\nGet a copy of the repository onto your local machine or GitHub account."
  },
  {
    "objectID": "github_basis.html#branch",
    "href": "github_basis.html#branch",
    "title": "GitHub Training",
    "section": "Branch",
    "text": "Branch\nA branch is an independent line of development.\n\nThe default and main line of development is typically called the main branch.\nBranches allow developers to work on new features or bug fixes in isolation without affecting the stable, main code."
  },
  {
    "objectID": "github_basis.html#fork",
    "href": "github_basis.html#fork",
    "title": "GitHub Training",
    "section": "Fork",
    "text": "Fork\nA fork is a personal copy of another user’s repository. You can make changes to your copy without affecting the original. It’s often the first step in contributing to a project you don’t own.\n\nWe will see this in the practical."
  },
  {
    "objectID": "github_basis.html#open-the-project-locally",
    "href": "github_basis.html#open-the-project-locally",
    "title": "GitHub Training",
    "section": "Open the project locally",
    "text": "Open the project locally"
  },
  {
    "objectID": "github_basis.html#commit",
    "href": "github_basis.html#commit",
    "title": "GitHub Training",
    "section": "Commit",
    "text": "Commit\nA commit is a snapshot of your repository at a specific point in time. It’s the fundamental building block of Git’s history.\n\nEvery commit has a unique ID (SHA), an author, a timestamp, and a commit message that explains why the change was made.\nCommits are what you create locally with Git."
  },
  {
    "objectID": "github_basis.html#create-a-new-file",
    "href": "github_basis.html#create-a-new-file",
    "title": "GitHub Training",
    "section": "Create a new file",
    "text": "Create a new file\n\nOpen the mds folder.\nFile &gt; New File &gt; Text File &gt; your_name.md\nAdd some content\nAdd a message in the commit box\nClick commit\nDon’t do anything else"
  },
  {
    "objectID": "github_basis.html#push-pull",
    "href": "github_basis.html#push-pull",
    "title": "GitHub Training",
    "section": "Push & Pull",
    "text": "Push & Pull\nThese are the actions used to synchronise your local Git repository with the remote repository on GitHub:\n\nPush: To send your local commits from your computer to the remote repository on GitHub.\nPull: To fetch and download changes (commits) from the remote repository on GitHub to your local computer. (We will see it later)"
  },
  {
    "objectID": "github_basis.html#pull-request-pr",
    "href": "github_basis.html#pull-request-pr",
    "title": "GitHub Training",
    "section": "Pull Request (PR)",
    "text": "Pull Request (PR)\nA Pull Request is a mechanism for a developer to propose their changes (commits from a branch) to be merged into another branch (usually the main branch of the original project).\n\nPRs are where discussion, code review, and automated testing happen before the code is integrated."
  },
  {
    "objectID": "github_basis.html#our-first-pr",
    "href": "github_basis.html#our-first-pr",
    "title": "GitHub Training",
    "section": "Our first PR",
    "text": "Our first PR"
  },
  {
    "objectID": "github_basis.html#merge",
    "href": "github_basis.html#merge",
    "title": "GitHub Training",
    "section": "Merge",
    "text": "Merge\nThe merge operation integrates the changes from one branch into another. When a Pull Request is approved, the repository maintainer will merge the feature branch into the main branch.\n\nLet’s merge your Pull Requests"
  },
  {
    "objectID": "github_basis.html#pull",
    "href": "github_basis.html#pull",
    "title": "GitHub Training",
    "section": "Pull",
    "text": "Pull\nPull: To fetch and download changes (commits) from the remote repository on GitHub to your local computer.\n\nChange to main branch\nFetch origin\nPull from origin"
  },
  {
    "objectID": "github_basis.html#how-everything-works",
    "href": "github_basis.html#how-everything-works",
    "title": "GitHub Training",
    "section": "How everything works",
    "text": "How everything works\nGit\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit init\nCreate a new local repository.\n\n\ngit clone &lt;url&gt;\nCopy a remote repository locally.\n\n\ngit remote add origin &lt;url&gt;\nAdd a new remote repository.\n\n\ngit status\nCheck status of changes and branch.\n\n\ngit add &lt;file&gt;\nStage specific file(s) for commit.\n\n\ngit commit -m \"message\"\nCommit staged changes.\n\n\ngit log\nView commit history.\n\n\ngit diff\nShow unstaged changes.\n\n\ngit branch &lt;name&gt;\nCreate a new branch.\n\n\ngit checkout &lt;branch&gt;\nSwitch to a branch.\n\n\ngit merge &lt;branch&gt;\nMerge another branch into the current one.\n\n\ngit fetch\nDownload updates from remote (no merge).\n\n\ngit pull\nFetch and merge changes from remote.\n\n\ngit push\nPush local commits to remote.\n\n\ngit revert &lt;commit&gt;\nRevert a specific commit with a new one.\n\n\n\n\n\nGitHub Desktop: provides the User Interface."
  },
  {
    "objectID": "github_basis.html#workflow",
    "href": "github_basis.html#workflow",
    "title": "GitHub Training",
    "section": "Workflow",
    "text": "Workflow"
  },
  {
    "objectID": "github_basis.html#need-to-update",
    "href": "github_basis.html#need-to-update",
    "title": "GitHub Training",
    "section": "Need to update",
    "text": "Need to update"
  },
  {
    "objectID": "github_basis.html#update-from-main",
    "href": "github_basis.html#update-from-main",
    "title": "GitHub Training",
    "section": "Update from main",
    "text": "Update from main"
  },
  {
    "objectID": "github_basis.html#update-from-main-1",
    "href": "github_basis.html#update-from-main-1",
    "title": "GitHub Training",
    "section": "Update from main",
    "text": "Update from main\n\nChange to your_branch branch\nBranch &gt; Update from main\nPush"
  },
  {
    "objectID": "github_basis.html#gitignore",
    "href": "github_basis.html#gitignore",
    "title": "GitHub Training",
    "section": ".gitignore",
    "text": ".gitignore\n\nThe .gitignore file tells git which files or folders to skip when tracking changes. It prevents temporary, sensitive, or unnecessary files from being added to a repository. Common examples include log files, build artifacts, and environment files. This keeps the repo clean and focused on essential code and assets.\n\nYou can ignore a file if you include the name on it my_file.txt.\nYou can ignore a folder if you include on it folder/.\nYou can ignore files using patterns (e.g. this would ignore all .txt files *.txt)"
  },
  {
    "objectID": "github_basis.html#merging-conflicts",
    "href": "github_basis.html#merging-conflicts",
    "title": "GitHub Training",
    "section": "Merging conflicts",
    "text": "Merging conflicts"
  },
  {
    "objectID": "github_basis.html#merging-conflicts-1",
    "href": "github_basis.html#merging-conflicts-1",
    "title": "GitHub Training",
    "section": "Merging conflicts",
    "text": "Merging conflicts"
  },
  {
    "objectID": "github_basis.html#lets-create-a-merging-conflict",
    "href": "github_basis.html#lets-create-a-merging-conflict",
    "title": "GitHub Training",
    "section": "Let’s create a merging conflict",
    "text": "Let’s create a merging conflict\n\nGo to your branch\nUpdate from main (if you did not do it before)\nEdit Extensively the README.md file\nOpen a Pull Request"
  },
  {
    "objectID": "github_basis.html#merging-conflicts-2",
    "href": "github_basis.html#merging-conflicts-2",
    "title": "GitHub Training",
    "section": "Merging conflicts",
    "text": "Merging conflicts\nA merging conflict can involve several files and folders, can be massive and sometimes unsolvable! Please follow the following tips to avoid merging conflicts:\n\nAvoid renaming of files and folders.\nAlways Update from main before adding some changes to your branch.\nKeep the changes the minimum possible time (&lt;1 day).\nBetter 3 separated Pull Requests over 3 consecutive days than 1 merging conflict after 3 days!"
  },
  {
    "objectID": "github_basis.html#issues",
    "href": "github_basis.html#issues",
    "title": "GitHub Training",
    "section": "Issues",
    "text": "Issues\n\nAn issue is a record used to track and manage tasks, bugs, or feature requests within a project. It serves as a central place for team members to describe a problem or idea, discuss potential solutions, assign responsibilities, and monitor progress. Issues often include details like titles, descriptions, labels, comments, and status updates, making it easier to collaborate, prioritise work, and maintain a clear overview of what needs to be done throughout the development process."
  },
  {
    "objectID": "github_basis.html#issues-1",
    "href": "github_basis.html#issues-1",
    "title": "GitHub Training",
    "section": "Issues",
    "text": "Issues\n\nLabels: Labels are tags used to categorise and organise issues by topic, priority, or status.\nAssignee: The assignee is the person responsible for handling or resolving the issue.\nType: The type indicates the nature of the issue, such as a bug, feature request, or task."
  },
  {
    "objectID": "github_basis.html#link-an-pull-request-to-an-issue",
    "href": "github_basis.html#link-an-pull-request-to-an-issue",
    "title": "GitHub Training",
    "section": "Link an Pull Request to an issue",
    "text": "Link an Pull Request to an issue\nYou can use ‘magical’ words to close an issue from a pull request:\n\nclose #12 / closes #12\nresolve #12 / resolves #12\nfix #12 / fixes #12\n\n\nRemember this as we will use it later!\n\n\nYou can otherwise link issues manually using the development tab."
  },
  {
    "objectID": "github_basis.html#templates",
    "href": "github_basis.html#templates",
    "title": "GitHub Training",
    "section": "Templates",
    "text": "Templates\n\nTemplates can be used to create new repositories:"
  },
  {
    "objectID": "github_basis.html#lets-get-started",
    "href": "github_basis.html#lets-get-started",
    "title": "GitHub Training",
    "section": "Let’s get started",
    "text": "Let’s get started\n\nMake sure you have the latest version of the needed packages:\n\n\ninstall.packages(\"pak\")\n\n\npak::pkg_install(c(\"omopgenerics\", \"CodelistGenerator\", \"CDMConnector\", \"ohdsi/omock\"))\n\n\n\nSet up your OMOP_DATA_FOLDER\n\nOpen your .Renviron file and write the following\nOMOP_DATA_FOLDER=\"path/to/data\"\n\nRestart R\nCheck that the environment variable is correctly set up\n\n\nSys.getenv(\"OMOP_DATA_FOLDER\")\n\n\nCreate a cdm reference:\n\n\nlibrary(omock)\nlibrary(duckdb)\ncdm &lt;- mockCdmFromDataset(datasetName = \"empty_cdm\", source = \"duckdb\")\ncdm"
  },
  {
    "objectID": "github_basis.html#codelistgenerator",
    "href": "github_basis.html#codelistgenerator",
    "title": "GitHub Training",
    "section": "CodelistGenerator",
    "text": "CodelistGenerator\nTo deal with codelist and concept_set_expression objects we will use the CodelistGenerator package:\n\nlibrary(CodelistGenerator)\nlibrary(tibble)\nlibrary(here)\nlibrary(omopgenerics)"
  },
  {
    "objectID": "github_basis.html#codelist",
    "href": "github_basis.html#codelist",
    "title": "GitHub Training",
    "section": "Codelist",
    "text": "Codelist\n\nA codelist is a named list of codes to be used in a study you can create a simple codelist as:\n\ncodes &lt;- list(codelist_name = c(252942L, 257581L, 313236L)) |&gt;\n  newCodelist()\ncodes\n\n\n- codelist_name (3 codes)\n\n\n\n\nA codelist object can contain multiple codelists:\n\ncodes &lt;- list(codelist_1 = c(252942L, 257581L, 313236L), codelist_2 = c(46269775L, 46269784L)) |&gt;\n  newCodelist()\ncodes\n\n\n- codelist_1 (3 codes)\n- codelist_2 (2 codes)"
  },
  {
    "objectID": "github_basis.html#codelist-1",
    "href": "github_basis.html#codelist-1",
    "title": "GitHub Training",
    "section": "Codelist",
    "text": "Codelist\n\nYou can create a codelist using drug ingredients like:\n\ncodes &lt;- getDrugIngredientCodes(cdm = cdm, name = \"acetaminophen\", routeCategory = \"oral\", nameStyle = \"{concept_name}\")\ncodes\n\n\n- acetaminophen (18755 codes)"
  },
  {
    "objectID": "github_basis.html#codelist-2",
    "href": "github_basis.html#codelist-2",
    "title": "GitHub Training",
    "section": "Codelist",
    "text": "Codelist\n\nYou can create a codelist from a text search:\n\ncandidates &lt;- getCandidateCodes(cdm = cdm, keywords = \"covid\")\ncodes &lt;- list(covid = candidates$concept_id) |&gt;\n  newCodelist()\ncodes\n\n\n- covid (29 codes)"
  },
  {
    "objectID": "github_basis.html#codelist-3",
    "href": "github_basis.html#codelist-3",
    "title": "GitHub Training",
    "section": "Codelist",
    "text": "Codelist\nAs we have seen codelists are deterministic and do not depend on vocabularies, but they can be long and difficult to manage."
  },
  {
    "objectID": "github_basis.html#export-codelist",
    "href": "github_basis.html#export-codelist",
    "title": "GitHub Training",
    "section": "Export Codelist",
    "text": "Export Codelist\n\nexportCodelist(x = codes, path = here(), type = \"csv\")\nexportCodelist(x = codes, path = here(), type = \"json\")"
  },
  {
    "objectID": "github_basis.html#import-a-codelist-in-atlas",
    "href": "github_basis.html#import-a-codelist-in-atlas",
    "title": "GitHub Training",
    "section": "Import a codelist in ATLAS",
    "text": "Import a codelist in ATLAS\nReally?"
  },
  {
    "objectID": "github_basis.html#import-a-codelist",
    "href": "github_basis.html#import-a-codelist",
    "title": "GitHub Training",
    "section": "Import a codelist",
    "text": "Import a codelist\n\ncodes &lt;- importCodelist(path = here(), type = \"csv\")\ncodes &lt;- importCodelist(path = here(), type = \"json\")\n\n\nIf you want to be friends use .csv"
  },
  {
    "objectID": "github_basis.html#your-turn",
    "href": "github_basis.html#your-turn",
    "title": "GitHub Training",
    "section": "Your turn",
    "text": "Your turn\nGo to the repository that we were working: https://github.com/oxford-pharmacoepi/TestRepository\n\nMake sure you are in your branch\nMake sure your branch is updated from main\nAssign an issue (that starts with CODELIST STEP 1) to yourself\nCreate the codelist that you are asked to create\nSave it in the codelist folder\nCommit\nPush\nOpen a Pull Request (link the Pull Request to the issue)"
  },
  {
    "objectID": "github_basis.html#conceptsetexpression",
    "href": "github_basis.html#conceptsetexpression",
    "title": "GitHub Training",
    "section": "conceptSetExpression",
    "text": "conceptSetExpression\nA concept_set_expression is a named list that contains an expression:\n\nconcept_id + logic (exclude and descendants)"
  },
  {
    "objectID": "github_basis.html#conceptsetexpression-1",
    "href": "github_basis.html#conceptsetexpression-1",
    "title": "GitHub Training",
    "section": "conceptSetExpression",
    "text": "conceptSetExpression\n\nWe do not provide any function to create concept_set_expression, but they can easily be created as a list of tibbles.\n\n\n\ncse &lt;- list(concept_name = tibble(\n  concept_id = c(317009L, 257581L),\n  descendants = c(TRUE, TRUE),\n  excluded = c(FALSE, TRUE),\n  mapped = c(TRUE, TRUE)\n)) |&gt;\n  newConceptSetExpression()\ncse\n\n\n- concept_name (2 concept criteria)"
  },
  {
    "objectID": "github_basis.html#your-turn-1",
    "href": "github_basis.html#your-turn-1",
    "title": "GitHub Training",
    "section": "Your turn",
    "text": "Your turn\nGo to the repository that we were working: https://github.com/oxford-pharmacoepi/TestRepository\n\nMake sure you are in your branch\nMake sure your branch is updated from main\nAssign an issue (that starts with CONCEPT SET EXPRESSION STEP 2) to yourself\nGo to ATLAS create the concept set expression\nExport the json file from ATLAS and save it locally (copy paste)\nImport the json file\nSave the csv file\nDelete the json file\nSave it in the conceptsets folder\nCommit\nPush\nOpen a Pull Request (link the Pull Request to the issue)\nAsk for a review"
  },
  {
    "objectID": "github_basis.html#lets-review",
    "href": "github_basis.html#lets-review",
    "title": "GitHub Training",
    "section": "Let’s review",
    "text": "Let’s review\n\nLive demo"
  },
  {
    "objectID": "github_basis.html#your-turn-2",
    "href": "github_basis.html#your-turn-2",
    "title": "GitHub Training",
    "section": "Your turn",
    "text": "Your turn\n\nProvide a review (ask sth random):\n\nTo add another concept\nTo change one of the logic\nTo change the name of the concept set expression"
  },
  {
    "objectID": "github_basis.html#your-turn-3",
    "href": "github_basis.html#your-turn-3",
    "title": "GitHub Training",
    "section": "Your turn",
    "text": "Your turn\n\nDo it yourself!\nWhatever you asked in the review do it\nChange the branch to the one your colleague was in\nEdit the concept set with whatever random request you came with\nCommit\nPush\nAsk for the review to the original author"
  },
  {
    "objectID": "github_basis.html#from-codelist-to-conceptsetexpression",
    "href": "github_basis.html#from-codelist-to-conceptsetexpression",
    "title": "GitHub Training",
    "section": "From codelist to conceptSetExpression",
    "text": "From codelist to conceptSetExpression\nYou can easily convert a codelist to a concept_set_expression:\n\n\ncodes\n\n\n- covid (29 codes)\n\nnewConceptSetExpression(codes)\n\n\n- covid (29 concept criteria)\n\nexportConceptSetExpression(codes, path = here(), type = \"csv\")"
  },
  {
    "objectID": "github_basis.html#from-conceptsetexpression-to-codelist",
    "href": "github_basis.html#from-conceptsetexpression-to-codelist",
    "title": "GitHub Training",
    "section": "From conceptSetExpression to codelist",
    "text": "From conceptSetExpression to codelist\nTo do that you will need a cdm object to get the descendants and then use the validateConceptSetArgument() function:\n\ncse\n\n\n- concept_name (2 concept criteria)\n\ncodelist &lt;- validateConceptSetArgument(conceptSet = cse, cdm = cdm)\ncodelist\n\n\n- concept_name (83 codes)"
  },
  {
    "objectID": "github_basis.html#your-turn-4",
    "href": "github_basis.html#your-turn-4",
    "title": "GitHub Training",
    "section": "Your turn",
    "text": "Your turn\n\nMake sure you are in your branch\nMake sure your branch is updated from main\nAssign an issue (that starts with CONVERT STEP 3) to yourself\nGet the concept set expression\nConvert it into a codelist\nSave it in the codelist folder\nCommit\nPush\nPull Request"
  },
  {
    "objectID": "github_basis.html#you-are-ready",
    "href": "github_basis.html#you-are-ready",
    "title": "GitHub Training",
    "section": "You are ready",
    "text": "You are ready"
  }
]