---
title: "GitHub Training"
subtitle: "An overview of GitHub and Codelists"
format:
  revealjs: 
    theme: [simple, styleSS25.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: |
      <div style="position: relative; width: 100%;">
        <div style="text-align: center; font-weight: 500;">GitHub Training</div>
        <div style="position: fixed; top: 20px; right: 20px;"><a href="index.qmd" style="text-decoration: none;">â¬… Back to Training website</a></div>
      </div>
execute:
  echo: true
  eval: true
editor: visual
---

## Git vs GitHub vs GitHub Desktop

. . .

**Git** is a distributed version control system that tracks changes in source code during software development and allows multiple developers to collaborate efficiently.

. . .

**GitHub** is a web-based platform that provides hosting for Git repositories, along with collaborative features like issue tracking, pull requests, and project management.

. . .

**GitHub Desktop** is a graphical user interface (GUI) application that simplifies the interaction with Git and GitHub, allowing users to perform common repository operations without using the command line.

# Core Concepts

## Repository (Repo)

A repository is essentially a **project's folder**. It contains all the project files, including code, documentation, images, and, most importantly, the **entire history** of every change made to those files.

![](images/repos.png){fig-align="center"}

## Explore repository

<https://github.com/oxford-pharmacoepi/Tidy-R-programming-with-OMOP>

. . .

It is nice to include it in any repository a `README.md` document to:

- Summarise the content of the repository.
- Instructions how to install your package, run your code or use your tool.
- Structure of the folders of the repository.
- How to contribute, indicate people how to contribute to the project.
- License 
- Acknowledgments
- Contact
- Citation

## Formatting `.md` file

You can usually format

- `#` to add titles.
- `----` to add separator lines.
- `- ` for bullet points.
- `*text*` for italic text.
- `**text**` for bold text.

## Clone

Get a copy of the repository onto your local machine or GitHub account.

. . .

![](images/clone.png){fig-align="center"}

. . .

![](images/clone2.png){fig-align="center"}

## Branch

A **branch** is an independent line of development.

- The default and main line of development is typically called the **main** branch.

- Branches allow developers to work on new features or bug fixes in **isolation** without affecting the stable, main code.

## Fork

A **fork** is a personal copy of another user's repository. You can make changes to your copy without affecting the original. It's often the first step in contributing to a project you don't own.


## Commit

A **commit** is a snapshot of your repository at a specific point in time. It's the fundamental building block of Git's history.

* Every commit has a unique ID (SHA), an author, a timestamp, and a **commit message** that explains *why* the change was made.

* Commits are what you create *locally* with Git.

## Push & Pull

These are the actions used to synchronize your local Git repository with the remote repository on GitHub:

* **Push:** To **send** your local commits from your computer to the remote repository on GitHub.

* **Pull:** To **fetch** and **download** changes (commits) from the remote repository on GitHub to your local computer.

## Pull Request (PR)

A **Pull Request** is a mechanism for a developer to propose their changes (commits from a branch) to be **merged** into another branch (usually the main branch of the original project).

* PRs are where discussion, code review, and automated testing happen before the code is integrated.

## Merge

The **merge** operation integrates the changes from one branch into another. When a Pull Request is approved, the repository maintainer will **merge** the feature branch into the main branch.

## How everything works

| Command | Description |
|----------|--------------|
| `git init` | Create a new local repository. |
| `git clone <url>` | Copy a remote repository locally. |
| `git remote add origin <url>` | Add a new remote repository. |
| `git status` | Check status of changes and branch. |
| `git add <file>` | Stage specific file(s) for commit. |
| `git commit -m "message"` | Commit staged changes. |
| `git log` | View commit history. |
| `git diff` | Show unstaged changes. |
| `git branch <name>` | Create a new branch. |
| `git checkout <branch>` | Switch to a branch. |
| `git merge <branch>` | Merge another branch into the current one. |
| `git fetch` | Download updates from remote (no merge). |
| `git pull` | Fetch and merge changes from remote. |
| `git push` | Push local commits to remote. |
| `git revert <commit>` | Revert a specific commit with a new one. |

## Workflow

## Update from main

## .gitignore

## Merging conflicts

# Codelists and conceptSetExpressions

## Codelist

## conceptSetExpression

## Export and Import

## `json` and `csv`

## From codelist to conceptSetExpression

## From conceptSetExpression to codelist
